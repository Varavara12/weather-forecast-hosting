{"version":3,"sources":["component/Info/Info.module.css","component/Forecast/Forecast.module.css","component/Forms/Forms.module.css","serviceWorker.js","component/Info/Info.jsx","component/Forecast/Forecast.jsx","component/Forms/Forms.jsx","App.js","AppContainer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Info","className","s","info","React","Component","Forecast","props","state","city","forecast","country","temp","speed","pressure","sunrise","sunset","error","Forms","form","onSubmit","addWeather","type","name","placeholder","App","AppContainer","event","a","preventDefault","target","elements","value","fetch","weatherApiLink","json","dataJson","console","log","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","date_sunrise","sunrise_date","setState","main","wind","this","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,KAAO,sB,yJCWLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uFCJSC,E,iLATN,OACI,yBAAKC,UAAWC,IAAEC,MACb,+GACA,+L,GALCC,IAAMC,W,iBCoBVC,MAnBf,SAAkBC,GACd,OACI,6BACKA,EAAMC,MAAMC,MACb,yBAAKR,UAAWC,IAAEQ,UACd,oHAAoBH,EAAMC,MAAMC,KAAhC,0CAA+CF,EAAMC,MAAMG,SAC3D,kGAAiBJ,EAAMC,MAAMI,KAA7B,6GACA,+GAAoBL,EAAMC,MAAMK,MAAhC,kBACA,gFAAcN,EAAMC,MAAMM,SAA1B,6CACA,yGAAmBP,EAAMC,MAAMO,SAC/B,mGAAkBR,EAAMC,MAAMQ,SAGlC,2BAAIT,EAAMC,MAAMS,S,iBCFbC,MAZf,SAAeX,GACX,OACI,yBAAKN,UAAWC,IAAEiB,MACd,0BAAMC,SAAUb,EAAMc,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oFAC3C,uFCWDC,MAZf,SAAalB,GACX,OACE,yBAAKN,UAAU,OACX,yBAAKA,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOoB,WAAYd,EAAMc,aACzB,kBAAC,EAAD,CAAUb,MAAOD,EAAMC,WCoDpBkB,E,2MA5DXlB,MAAQ,CACJC,KAAM,KACNE,QAAS,KACTC,KAAM,KACNC,MAAO,KACPE,QAAS,KACTC,OAAQ,KACRC,MAAO,M,EAGXI,W,uCAAa,WAAOM,GAAP,+BAAAC,EAAA,yDACTD,EAAME,mBACApB,EAAOkB,EAAMG,OAAOC,SAAStB,KAAKuB,OAF/B,iCAMDC,MAAM,qDAAD,OAAsDxB,EAAtD,yCAnBK,qCAaT,cAKCyB,EALD,gBAOkBA,EAAeC,OAPjC,OAOCC,EAPD,OAQLC,QAAQC,IAAIF,GAERpB,EAASoB,EAASG,IAAIvB,QACtBwB,EAAO,IAAIC,MACVC,QAAQ1B,GACT2B,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAErE/B,EAAUqB,EAASG,IAAIxB,SACvBgC,EAAe,IAAIN,MACVC,QAAQ3B,GACjBiC,EAAeD,EAAaH,WAAa,IAAMG,EAAaF,aAAe,IAAME,EAAaD,aAElG,EAAKG,SAAS,CACVxC,KAAM2B,EAASb,KACfZ,QAASyB,EAASG,IAAI5B,QACtBC,KAAMwB,EAASc,KAAKtC,KACpBC,MAAOuB,EAASe,KAAKtC,MACrBC,SAAUsB,EAASc,KAAKpC,SACxBC,QAASiC,EACThC,OAAQ2B,EACR1B,MAAO,OA5BN,wBA+BL,EAAKgC,SAAS,CACVxC,KAAM,KACNE,QAAS,KACTC,KAAM,KACNC,MAAO,KACPE,QAAS,KACTC,OAAQ,KACRC,MAAO,qIAtCN,4C,8HA4CT,OACI,kBAAC,EAAD,CAAKI,WAAY+B,KAAK/B,WAAYb,MAAO4C,KAAK5C,Y,GAxD/BJ,IAAMC,W,MCGjCgD,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SN4HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb1f91f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Info_info__Nwssq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"Forecast_forecast__2GE-H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Forms_form__3zXU3\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './Info.module.css'\r\n\r\nclass Info extends React.Component{\r\n     render() {\r\n         return(\r\n             <div className={s.info}>\r\n                  <h2>Прогноз погоды</h2>\r\n                  <p>Узнайте погоду в вашем городе.</p>\r\n             </div>\r\n         )\r\n     }\r\n}\r\n\r\nexport default Info","import React from 'react';\r\nimport s from \"./Forecast.module.css\"\r\n\r\n\r\nfunction Forecast(props) {\r\n    return (\r\n        <div>\r\n            {props.state.city &&\r\n            <div className={s.forecast}>\r\n                <p>Местоположение: {props.state.city}, Страна {props.state.country}</p>\r\n                <p>Температера: {props.state.temp} градусов по Цельсия</p>\r\n                <p>Скорость ветра: {props.state.speed} м.с</p>\r\n                <p>Давление: {props.state.pressure} мм рт. ст.</p>\r\n                <p>Восход солнца: {props.state.sunrise}</p>\r\n                <p>Закат солнца: {props.state.sunset}</p>\r\n            </div>\r\n            }\r\n            <p>{props.state.error}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Forecast","import React from 'react';\r\nimport s from './Forms.module.css'\r\n\r\nfunction Forms(props) {\r\n    return (\r\n        <div className={s.form}>\r\n            <form onSubmit={props.addWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"Выберите город\"/>\r\n                <button>Получить</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Forms","import React from 'react';\nimport './App.css';\nimport Info from \"./component/Info/Info\";\nimport Forecast from \"./component/Forecast/Forecast\";\nimport Forms from \"./component/Forms/Forms\";\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n        <div className=\"main\">\n            <Info/>\n            <Forms addWeather={props.addWeather}/>\n            <Forecast state={props.state}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport App from \"./App\";\nconst openWeatherApiKey = 'c792484ade42380886f51003cfcaf04d';\n\nclass AppContainer extends React.Component {\n    state = {\n        city: null,\n        country: null,\n        temp: null,\n        speed: null,\n        sunrise: null,\n        sunset: null,\n        error: null\n    };\n\n    addWeather = async (event) => {\n        event.preventDefault();\n        const city = event.target.elements.city.value;\n\n        if (city) {\n            const weatherApiLink = await\n                fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&mode=json&appid=${openWeatherApiKey}`)\n            const dataJson = await weatherApiLink.json();\n            console.log(dataJson)\n\n            let sunset = dataJson.sys.sunset;\n            let date = new Date();\n            date.setTime(sunset);\n            let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n            let sunrise = dataJson.sys.sunrise;\n            let date_sunrise = new Date();\n            date_sunrise.setTime(sunrise);\n            let sunrise_date = date_sunrise.getHours() + \":\" + date_sunrise.getMinutes() + \":\" + date_sunrise.getSeconds();\n\n            this.setState({\n                city: dataJson.name,\n                country: dataJson.sys.country,\n                temp: dataJson.main.temp,\n                speed: dataJson.wind.speed,\n                pressure: dataJson.main.pressure,\n                sunrise: sunrise_date,\n                sunset: sunset_date,\n                error: null\n            })\n        } else {\n            this.setState({\n                city: null,\n                country: null,\n                temp: null,\n                speed: null,\n                sunrise: null,\n                sunset: null,\n                error: \"Введите название города\"\n            })\n        }\n    };\n\n    render() {\n        return (\n            <App addWeather={this.addWeather} state={this.state}/>\n        )\n    }\n}\n\nexport default AppContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppContainer from \"./AppContainer\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}